#!/usr/bin/env python3

# Copyright 2011, Marc Garcia <garcia.marc@gmail.com>
#
# This file is part of Viri.
#
# Viri is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# Viri is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Viri.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import time
import logging
from optparse import OptionParser
from configparser import RawConfigParser
from libviri.rpcserver import RPCServer
from libviri.orm import Database
from libviri import objects


APP_NAME = 'virid'
APP_VERSION = '0.1'
APP_DESC = 'Remote execution of Python scripts'
SLEEP_TIME = 5 # seconds
LOG_LEVELS = ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')
DEFAULT_CONFIG_FILE = '/etc/viri/virid.conf'
DEFAULTS = {
    'general': {
        'port': '6806'},
    'paths': {
        'known_ca': '/etc/viri/ca.cert',
        'certKey_file': '/etc/viri/virid.pem',
        'database_file': '/var/viri/viri.db'},
    'logging': {
        'log_file': '/var/log/virid.log',
        'log_level': 'WARNING',
        'log_format': '%(levelname)s::%(asctime)s::%(message)s'},
}


class ViriDaemon:
    def __init__(self, config_file, as_daemon, pid_file):
        self.config_file = config_file
        self.as_daemon = as_daemon
        self.pid_file = pid_file
        self._setup()

    def _daemonize(self):
        """Deatach the process from the controlling terminal and run in the
        background as a daemon.

        Based on:
            http://code.activestate.com/recipes/
                278731-creating-a-daemon-the-python-way/
        """
        import resource

        # double fork
        if os.fork() != 0:
            os._exit(0)
        else:
            os.setsid()
            if os.fork() != 0:
                os._exit(0)
            else:
                os.chdir(os.path.expanduser('~'))
                os.umask(0)

        maxfd = resource.getrlimit(resource.RLIMIT_NOFILE)[1]
        maxfd = 1024 if maxfd == resource.RLIM_INFINITY else maxfd
        for fd in range(0, maxfd):
            try:
                os.close(fd)
            except OSError:
                pass
        os.open(os.devnull, os.O_RDWR)
        os.dup2(0, 1)
        os.dup2(0, 2)

    def _setup(self):
        """Initializes all required attributes, getting the values from the
        configuration file.
        """
        if not os.path.isfile(self.config_file):
            raise ValueError('Configuration file not found: {}'.format(
                self.config_file))
        
        config = RawConfigParser(DEFAULTS)
        config.read((self.config_file,))

        self.port = int(config.get('general', 'port'))
        self.ca_file = config.get('paths', 'known_ca')
        self.cert_key_file = config.get('paths', 'cert_key_file')
        self.db_file = config.get('paths', 'database_file')
        self.logfile = config.get('logging', 'log_file')
        self.loglevel = config.get('logging', 'log_level')
        self.logformat = config.get('logging', 'log_format')

        if not os.path.isfile(self.ca_file):
            raise ValueError('Known CAs file not found: {}'.format(
                self.ca_file))
        if not os.path.isfile(self.cert_key_file):
            raise ValueError('Certificate and key file not found: {}'.format(
                self.cert_key_file))

        self.db = Database(self.db_file)
        if self.db.new_db:
            for obj in objects.objects:
                obj.create_table(self.db)

        conf = dict([(sc, dict(config.items(sc))) for sc in config.sections()])

        self.context = dict(conf=conf, db=self.db)
        for obj in objects.objects:
            self.context[obj.__name__] = obj

        logging.basicConfig(
            filename=self.logfile,
            format=self.logformat,
            level=getattr(logging, self.loglevel))

    def start(self):
        """Starts the ViriDaemon. This daemonizes the process, gets required
        settings from config file, and starts both the RPC server to accept
        connections form viric instances.
        """
        import signal
        import threading

        logging.info('Starting daemon...')
        signal.signal(signal.SIGTERM, self.stop)
        if self.as_daemon:
            self._daemonize()

        if self.pid_file:
            with open(self.pid_file, 'w') as f:
                f.write(str(os.getpid()))

        self.rpc_server = RPCServer(
            self.port,
            self.ca_file,
            self.cert_key_file,
            self.db,
            self.context)
        t = threading.Thread(target=self.rpc_server.start)
        t.daemon = True
        t.start()
        logging.info('Daemon started on port %s' % self.port)

        self.request_stop = False
        while not self.request_stop:
            time.sleep(SLEEP_TIME)

    def stop(self, signum=None, frame=None):
        logging.info('Stopping daemon...')
        self.rpc_server.stop()
        self.request_stop = True
        logging.info('Daemon stopped')
        sys.exit(0)

if __name__ == '__main__':
    parser = OptionParser(
        description=APP_DESC,
        version='{0} {1}'.format(APP_NAME, APP_VERSION))
    parser.add_option('-c', '--config', dest='config_file',
        help='configuration file with settings to be used by virid',
        default=DEFAULT_CONFIG_FILE)
    parser.add_option('-d', '--no-daemon', action='store_false',
        dest='as_daemon', help='start as a regular program', default=True)
    parser.add_option('-p', '--pid-file', dest='pid_file',
        help='path to the file where to save the process id', default=None)
    (options, args) = parser.parse_args()

    try:
        virid = ViriDaemon(**vars(options))
    except Exception as exc:
        sys.stderr.write('%s\n' % exc)
        logging.critical('%s\n' % exc)
        sys.exit(1)

    try:
        virid.start()
    except KeyboardInterrupt:
        virid.stop()

