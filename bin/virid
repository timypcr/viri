#!/usr/bin/env python3
import sys
import os
import logging
import multiprocessing
from optparse import OptionParser
from configparser import RawConfigParser
from viri.rpcserver import RPCServer
from viri.schedserver import SchedServer
from viri.orm import Database
from viri import objects


APP_NAME = 'virid'
APP_VERSION = '0.0.1'
APP_DESC = 'Receives and executes scripts from viric instances'
LOG_LEVELS = ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')
SCRIPT_DIR = 'script'
INFO_DIR = 'info'
DATA_DIR = 'data'
DEFAULT_CONFIG_FILE = '/etc/viri/virid.conf'
DEFAULTS = {
    'General': {
        'Port': '6806'},
    'Paths': {
        'KnownCAs': '/etc/viri/ca.cert',
        'CertKeyFile': '/etc/viri/virid.pem',
        'DatabaseFile': '/var/viri/viri.db'},
    'Logging': {
        'LogFile': '/var/log/virid.log',
        'LogLevel': 'WARNING',
        'LogFormat': '%(levelname)s::%(asctime)s::%(message)s'},
}


class ViriDaemon:
    def __init__(self, config_file):
        """Initializes all required attributes, getting the values from the
        configuration file.

        Arguments:
        config_file -- path to the configuration file
        """
        config = RawConfigParser(DEFAULTS)
        config.read((config_file,))

        self.port = int(config.get('General', 'Port'))
        self.ca_file = config.get('Paths', 'KnownCAs')
        self.cert_key_file = config.get('Paths', 'CertKeyFile')
        self.db_file = config.get('Paths', 'DatabaseFile')
        self.logfile = config.get('Logging', 'LogFile')
        self.loglevel = config.get('Logging', 'LogLevel')
        self.logformat = config.get('Logging', 'LogFormat')

        if not os.path.isfile(self.ca_file):
            raise ValueError('Known CAs file not found: %s' % self.ca_file)
        if not os.path.isfile(self.cert_key_file):
            raise ValueError('Certificate and key file not found: %s' %
                self.cert_key_file)

        self.db = Database(self.db_file)
        if self.db.new_db:
            for obj in objects.objects:
                obj.create_table(self.db)

        custom_settings = dict(config.items('Custom'))
        for key in DEFAULTS.keys():
            del custom_settings[key.lower()]
        conf = type('Conf', tuple(), custom_settings)

        self.context = type('Context', tuple(), dict(conf=conf, db=self.db))
        for obj in objects.objects:
            setattr(self.context, obj.__name__, obj)

        logging.basicConfig(
            filename=self.logfile,
            format=self.logformat,
            level=getattr(logging, self.loglevel))

    def start(self):
        """Starts the ViriDaemon. It starts the SchedServer for task
        scheduling, and the RPCServer to accept connections form viric
        instances
        """
        logging.info('Started %s daemon on port %s' % (
            APP_NAME,
            self.port))
        self.sched_server = SchedServer(self.db, self.context)
        self.sched_server_proc = multiprocessing.Process(
            target=self.sched_server.start)
        self.sched_server_proc.start()

        self.rpc_server = RPCServer(
            self.port,
            self.ca_file,
            self.cert_key_file,
            self.db,
            self.context)
        self.rpc_server.start()

    def stop(self):
        self.sched_server_proc.join()
        logging.info('Stopped %s daemon' % APP_NAME)

if __name__ == '__main__':
    parser = OptionParser(
        description=APP_DESC,
        version=APP_VERSION)
    parser.add_option('-c', '--config', dest='config_file',
        help='configuration file with settings to be used by virid',
        default=DEFAULT_CONFIG_FILE)
    (options, args) = parser.parse_args()

    try:
        virid = ViriDaemon(**vars(options))
    except Exception as exc:
        raise
        sys.stderr.write('%s: %s\n' % (type(exc).__name__, exc))
        sys.exit(1)

    try:
        virid.start()
    except KeyboardInterrupt:
        virid.stop()

