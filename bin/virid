#!/usr/bin/env python3
import sys
import os
import logging
import multiprocessing
import resource
from optparse import OptionParser
from configparser import RawConfigParser
from viri.rpcserver import RPCServer
from viri.schedserver import SchedServer
from viri.orm import Database
from viri import objects


APP_NAME = 'virid'
APP_VERSION = '0.0.1'
APP_DESC = 'Receives and executes scripts from viric instances'
LOG_LEVELS = ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')
SCRIPT_DIR = 'script'
INFO_DIR = 'info'
DATA_DIR = 'data'
DEFAULT_CONFIG_FILE = '/etc/viri/virid.conf'
DEFAULTS = {
    'General': {
        'Port': '6806'},
    'Paths': {
        'KnownCAs': '/etc/viri/ca.cert',
        'CertKeyFile': '/etc/viri/virid.pem',
        'DatabaseFile': '/var/viri/viri.db'},
    'Logging': {
        'LogFile': '/var/log/virid.log',
        'LogLevel': 'WARNING',
        'LogFormat': '%(levelname)s::%(asctime)s::%(message)s'},
}


class ViriDaemon:
    def __init__(self, config_file, as_daemon):
        self.config_file = config_file
        self.as_daemon = as_daemon
        self._setup()

    def _daemonize(self):
        """Deatach the process from the controlling terminal and run in the
        background as a daemon.

        Based on:
            http://code.activestate.com/recipes/
                278731-creating-a-daemon-the-python-way/
        """
        # double fork
        if os.fork() != 0:
            os._exit(0)
        else:
            os.setsid()
            if os.fork() != 0:
                os._exit(0)
            else:
                os.chdir(os.path.expanduser('~'))
                os.umask(0)

        maxfd = resource.getrlimit(resource.RLIMIT_NOFILE)[1]
        maxfd = 1024 if maxfd == resource.RLIM_INFINITY else maxfd
        for fd in range(0, maxfd):
            try:
                os.close(fd)
            except OSError:
                pass
        os.open(os.devnull, os.O_RDWR)
        os.dup2(0, 1)
        os.dup2(0, 2)

    def _setup(self):
        """Initializes all required attributes, getting the values from the
        configuration file.
        """
        config = RawConfigParser(DEFAULTS)
        config.read((self.config_file,))

        self.port = int(config.get('General', 'Port'))
        self.ca_file = config.get('Paths', 'KnownCAs')
        self.cert_key_file = config.get('Paths', 'CertKeyFile')
        self.db_file = config.get('Paths', 'DatabaseFile')
        self.logfile = config.get('Logging', 'LogFile')
        self.loglevel = config.get('Logging', 'LogLevel')
        self.logformat = config.get('Logging', 'LogFormat')

        if not os.path.isfile(self.ca_file):
            raise ValueError('Known CAs file not found: {}'.format(
                self.ca_file))
        if not os.path.isfile(self.cert_key_file):
            raise ValueError('Certificate and key file not found: {}'.format(
                self.cert_key_file))

        self.db = Database(self.db_file)
        if self.db.new_db:
            for obj in objects.objects:
                obj.create_table(self.db)

        custom_settings = dict(config.items('Custom'))
        for key in DEFAULTS.keys():
            del custom_settings[key.lower()]
        conf = type('Conf', tuple(), custom_settings)

        self.context = type('Context', tuple(), dict(conf=conf, db=self.db))
        for obj in objects.objects:
            setattr(self.context, obj.__name__, obj)

        logging.basicConfig(
            filename=self.logfile,
            format=self.logformat,
            level=getattr(logging, self.loglevel))

    def start(self):
        """Starts the ViriDaemon. This daemonizes the process, gets required
        settings from config file, and starts both the SchedServer for task
        scheduling, and the RPCServer to accept connections form viric instances
        """
        logging.info('Starting daemon...')
        if self.as_daemon:
            self._daemonize()
        self.sched_server = SchedServer(self.db, self.context)
        self.sched_server_proc = multiprocessing.Process(
            target=self.sched_server.start)
        self.sched_server_proc.start()

        self.rpc_server = RPCServer(
            self.port,
            self.ca_file,
            self.cert_key_file,
            self.db,
            self.context)
        self.rpc_server.start()
        logging.info('Daemon started on port %s' % self.port)

    def stop(self):
        logging.info('Stopping daemon...')
        self.sched_server_proc.join()
        logging.info('Daemon stopped')

if __name__ == '__main__':
    parser = OptionParser(
        description=APP_DESC,
        version=APP_VERSION)
    parser.add_option('-c', '--config', dest='config_file',
        help='configuration file with settings to be used by virid',
        default=DEFAULT_CONFIG_FILE)
    parser.add_option('-d', '--no-daemon', action='store_false',
        dest='as_daemon', help='start as a regular program', default=True)
    (options, args) = parser.parse_args()

    try:
        virid = ViriDaemon(**vars(options))
    except Exception as exc:
        sys.stderr.write('%s\n' % exc)
        logging.critical('%s\n' % exc)
        sys.exit(1)

    try:
        virid.start()
    except KeyboardInterrupt:
        virid.stop()

