#!/opt/python-viri/bin/python3

# Copyright 2011, Marc Garcia <garcia.marc@gmail.com>
#
# This file is part of Viri.
#
# Viri is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# Viri is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Viri.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import argparse
from libviri import __version__
from libviri.viric import get_all_commands, ViriError

EXIT_COMMAND_ERRORS = 1
EXIT_DIFFERENT_RETVALS = 2

class Viric:
    def parse_args(self):
        parser = argparse.ArgumentParser(
            description='Remote execution of Python scripts')
        subparsers = parser.add_subparsers(help='command to execute')
        parser.add_argument('-H', '--hosts', dest='hosts', default='localhost',
            help='remote hosts (e.g. localhost or 192.168.1.1:6808,10.0.0.1:6808')
        parser.add_argument('-k', '--keyfile', dest='keyfile', default=None,
            help='path to TLS key (omit if provided with TLS certificate)')
        parser.add_argument('-c', '--certfile', dest='certfile',
            default=os.path.expanduser('~/.viri/viric.pem'),
            help='path to TLS certificate')
        parser.add_argument('-v', '--version', action='version',
            version='viric ' + __version__)

        for mod in get_all_commands():
            command_name = mod.__name__
            local_class = mod.Local()
            subparser = subparsers.add_parser(
                command_name,
                help=mod.__doc__)
            local_class.add_arguments(subparser)
            subparser.set_defaults(run=local_class.connect_and_run)

        return parser.parse_args()

    def get_hosts(self, hosts_arg):
        filename = os.path.expanduser(os.path.join(
            '~',
            '.viri',
            'hosts',
            hosts_arg))
        if os.path.isfile(filename):
            with open(filename, 'r') as f:
                hosts = f.read().split('\n')
            hosts = map(str.strip, hosts)
            hosts = filter(lambda x: x and x[0] != '#', hosts)
        else:
            hosts = hosts_arg.split(',')

        return hosts

    def run(self):
        args = self.parse_args()
        retvals = set()
        hosts = self.get_hosts(args.hosts)

        for host in hosts:
            try:
                retval, stdout, stderr = args.run(host, **vars(args))
            except ViriError as exc:
                sys.stderr.write(str(exc) + '\n')
                sys.exit(EXIT_COMMAND_ERRORS)
            else:
                retvals.add(retval)
                if len(hosts) > 1:
                    sys.stderr.write('{} ({}) >>>\n'.format(
                            host.split(':')[0],
                            'SUCCESS' if retval == 0 else 'ERROR'))
                if stderr: sys.stderr.write(stderr)
                if stdout: sys.stdout.write(stdout)

        if len(retvals) == 1:
            sys.exit(retvals.pop())
        else:
            sys.exit(EXIT_DIFFERENT_RETVALS)


if __name__ == '__main__':
    Viric().run()

